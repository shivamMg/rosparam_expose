#!/usr/bin/env python
import sys

import click
import rospy

from rosparam_expose.srv import Set, Get, Load, Dump, Delete, List

NODE_NAME = 'rosparam_expose_client'
SRV_NS = '/rosparam_expose'


@click.group()
def client():
    pass


@click.command('set')
@click.argument('name')
@click.argument('value')
@click.argument('ros_args', nargs=-1)
@click.option('--timeout', default=5, type=float, help='number of seconds to wait for service')
def set_param(name, value, ros_args, timeout):
    srv = SRV_NS + '/set'
    rospy.wait_for_service(srv, timeout=timeout)
    try:
        srv_proxy = rospy.ServiceProxy(srv, Set)
        srv_proxy(name, value)
    except rospy.ServiceException, e:
        click.echo('Service call failed: {}'.format(e), err=True)
        sys.exit(1)


@click.command('get')
@click.argument('name')
@click.argument('ros_args', nargs=-1)
@click.option('--timeout', default=5, type=float, help='number of seconds to wait for service')
def get_param(name, ros_args, timeout):
    srv = SRV_NS + '/get'
    rospy.wait_for_service(srv, timeout=timeout)
    try:
        srv_proxy = rospy.ServiceProxy(srv, Get)
        response = srv_proxy(name)
        click.echo(response.value)
    except rospy.ServiceException, e:
        click.echo('Service call failed: {}'.format(e), err=True)
        sys.exit(1)


@click.command('load')
@click.argument('filepath', type=click.Path(exists=True))
@click.argument('namespace', default='/', required=False)
@click.argument('ros_args', nargs=-1)
@click.option('--timeout', default=5, type=float, help='number of seconds to wait for service')
def load_file(filepath, namespace, ros_args, timeout):
    with open(filepath, 'r') as f:
        value = f.read()
    srv = SRV_NS + '/load'
    rospy.wait_for_service(srv, timeout=timeout)
    try:
        srv_proxy = rospy.ServiceProxy(srv, Load)
        srv_proxy(value, namespace)
    except rospy.ServiceException, e:
        click.echo('Service call failed: {}'.format(e), err=True)
        sys.exit(1)


@click.command('dump')
@click.argument('filepath')
@click.argument('namespace', default='/', required=False)
@click.argument('ros_args', nargs=-1)
@click.option('--timeout', default=5, type=float, help='number of seconds to wait for service')
def dump_file(filepath, namespace, ros_args, timeout):
    srv = SRV_NS + '/dump'
    rospy.wait_for_service(srv, timeout=timeout)
    try:
        srv_proxy = rospy.ServiceProxy(srv, Dump)
        response = srv_proxy(namespace)
    except rospy.ServiceException, e:
        click.echo('Service call failed: {}'.format(e), err=True)
        sys.exit(1)
    with open(filepath, 'w') as f:
        f.write(response.value)


@click.command('delete')
@click.argument('name')
@click.argument('ros_args', nargs=-1)
@click.option('--timeout', default=5, type=float, help='number of seconds to wait for service')
def delete_param(name, ros_args, timeout):
    srv = SRV_NS + '/delete'
    rospy.wait_for_service(srv, timeout=timeout)
    try:
        srv_proxy = rospy.ServiceProxy(srv, Delete)
        srv_proxy(name)
    except rospy.ServiceException, e:
        click.echo('Service call failed: {}'.format(e), err=True)
        sys.exit(1)


@click.command('list')
@click.option('--namespace', default='/', help='namespace to list parameters from')
@click.argument('ros_args', nargs=-1)
@click.option('--timeout', default=5, type=float, help='number of seconds to wait for service')
def list_params(namespace, ros_args, timeout):
    srv = SRV_NS + '/list'
    rospy.wait_for_service(srv, timeout=timeout)
    try:
        srv_proxy = rospy.ServiceProxy(srv, List)
        response = srv_proxy(namespace)
    except rospy.ServiceException, e:
        click.echo('Service call failed: {}'.format(e), err=True)
        sys.exit(1)
    click.echo(response.value)


if __name__ == '__main__':
    rospy.init_node(NODE_NAME, anonymous=True)
    client.add_command(set_param)
    client.add_command(get_param)
    client.add_command(load_file)
    client.add_command(dump_file)
    client.add_command(delete_param)
    client.add_command(list_params)
    client()
